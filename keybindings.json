// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+alt+c",
        "command": "macros.copyWithoutNewLine",
        "when": "editorTextFocus && !editorHasSelection"
    },
    {
        "key": "alt+c",
        "command": "workbench.action.terminal.clear"
    },
    {
        "key": "ctrl+alt+t",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "ctrl+alt+t",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "command": "saveAll"
    },
    {
        "key": "ctrl+k s",
        "command": "-saveAll"
    },
    {
        "key": "ctrl+g ctrl+a",
        "command": "git.stageAll"
    },
    // https://github.com/microsoft/vscode/issues/84340
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "ctrl+shift+g s",
        "command": "-gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+down",
        "command": "editor.emmet.action.decrementNumberByOne"
    },
    {
        "key": "ctrl+shift+up",
        "command": "editor.emmet.action.incrementNumberByOne"
    },
    {
        "key": "alt+7",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+q",
        "command": "toggleexcludedfiles.toggle",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-toggleexcludedfiles.toggle",
        "when": "filesExplorerFocus"
    },
    {
        "key": "alt+i",
        "command": "inlineFold.toggle"
    },

    {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+v",
        "command": "workbench.debug.action.focusVariablesView"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-sanity.executeGroq",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+d",
        "command": "workbench.view.debug"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+c",
        "command": "workbench.debug.action.focusBreakpointsView"
    },
    {
        "key": "alt+c",
        "command": "workbench.debug.panel.action.clearReplAction"
    },
    {
        "key": "ctrl+alt+f",
        "command": "-workbench.view.extension.favorites-explorer",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+g ctrl+o",
        "command": "git.openFile"
    },
    {
        "key": "ctrl+oem_comma",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "ctrl+oem_comma",
        "command": "typescript.removeUnusedImports"
    },
    {
        "key": "alt+b",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.toggleAuxiliaryBar",
                "workbench.action.toggleSidebarVisibility"
            ]
        }
    },
    // {
    // 	"key": "ctrl+shift+b",
    //   "command": "workbench.action.closeAuxiliaryBar",
    // 	"when": "sideBarVisible",
    //   "title": "My toggle (close) Side Bar"
    // },
    // {
    // 	"key": "ctrl+shift+b",
    // 	"command": "workbench.action.focusAuxiliaryBar",
    // 	"when": "!sideBarVisible",
    // 	// "title": "My toggle (open) Side Bar"
    // },
    // {
    //   "key": "shift+alt+b",
    //   "command": "runCommands",
    //   "args": {
    //     "commands": [
    //       "workbench.action.closeAuxiliaryBar",
    //       "workbench.action.closeSidebar"
    //     ]
    //   },
    //   "title": "Close Side Bar"
    // },
    {
        "key": "Escape",
        "command": "extension.jumpy-exit",
        "when": "editorTextFocus && jumpy.isJumpyMode"
    },
    {
        "key": "ctrl+oem_102",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+a",
        "command": "editor.action.inspectTMScopes"
    },
    //
    // VIM NAVIGATION SHORTCUTS
    //
    {
        //  "ctrl+h": Focuses on the left editor group when the text editor is focused, Vim extension is active, and Vim is not in Insert mode.
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // "ctrl+l": Focuses on the right editor group when the text editor is focused, Vim extension is active, and Vim is not in Insert mode.
        "key": "ctrl+l",
        "command": "workbench.action.focusRightGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // "ctrl+k": Focuses on the editor group above the current one when the text editor is focused, Vim extension is active, and Vim is not in Insert mode.
        "key": "ctrl+k",
        "command": "workbench.action.focusAboveGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // "ctrl+j": Focuses on the editor group below the current one when the text editor is focused, Vim extension is active, and Vim is not in Insert mode.
        "key": "ctrl+j",
        "command": "workbench.action.focusBelowGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },

    //
    // SUGGESTIONS AND AUTOCOMPLETION SHORTCUTS
    //

    {
        "key": "shift+space",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "vim.remap",
                    "when": "vim.mode == 'Normal'", // weird... why is this not working...
                    "args": {
                        "after": ["h"]
                    }
                },
                "editor.action.triggerSuggest"
            ]
        },
        "when": "vim.mode == 'Normal' && editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+space",
        "command": "runCommands",
        "args": {
            "commands": ["editor.action.triggerSuggest"]
        },
        "when": "vim.mode != 'Normal' && editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+space",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "Escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        // "ctrl+j": Selects the next suggestion in the suggestions widget when the widget is visible.
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        // "ctrl+k": Selects the previous suggestion in the suggestions widget when the widget is visible.
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+space", // enter suggestion
        "command": "runCommands",
        "args": {
            "commands": [
                "acceptSelectedSuggestion"
                // {
                //   "command": "change vim to insert mode",
                //   "when": "vim.mode == 'Normal'"
                // }
            ]
        },
        "when": "suggestWidgetVisible"
    },
    {
        // "ctrl+j": Selects the next item in the Quick Open dialog when it is open.
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        // "ctrl+k": Selects the previous item in the Quick Open dialog when it is open.
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },

    //
    // EDITOR AND FILES SWITCHING NAVIGATION SHORTCUTS
    //
    // To switch between open files within an editor group, use the following shortcuts:
    // ctrl+tab: Go to the next file in the group.
    // ctrl+shift+tab: Go to the previous file in the group.
    // To switch focus between editor groups, use the following shortcuts:
    // ctrl+1: Focus on the first (left) editor group.
    // ctrl+2: Focus on the second (right) editor group.
    // With these shortcuts, you can easily navigate between open files in side-by-side text editor windows.
    // For example, to switch from a file in the left editor group to a file in the right editor group, press ctrl+2,
    // and then use ctrl+tab or ctrl+shift+tab to navigate between files in the right editor group.
    // To switch back to the left editor group, press ctrl+1.

    //
    // FILE EXPLORER SHORTCUTS
    //

    {
        // Focus on File Explorer when text editor is focused
        "key": "ctrl+shift+e",
        "command": "workbench.files.action.focusFilesExplorer",
        "when": "editorTextFocus"
    },
    {
        // Focus on active text editor group when File Explorer is focused
        "key": "ctrl+shift+e",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },

    {
        // Open selected file in the first (left) editor group from File Explorer
        "key": "ctrl+shift+1",
        "command": "explorer.openToSide",
        "args": { "group": 0 },
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        // Open selected file in the second (right) editor group from File Explorer
        "key": "ctrl+shift+2",
        "command": "explorer.openToSide",
        "args": { "group": 1 },
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },

    //
    // FILE EXPLORER NAVIGATION SHORTCUTS
    //

    {
        // "ctrl+h": Collapses the selected item in a list when the list is focused and no input field is focused.
        "key": "ctrl+h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        // "ctrl+l": Expands the selected item in a list when the list is focused and no input field is focused.
        "key": "ctrl+l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        // "ctrl+k": Focuses on the item above the currently selected item in a list when the list is focused and no input field is focused.
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        // "ctrl+j": Focuses on the item below the currently selected item in a list when the list is focused and no input field is focused
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        // "cmd+enter": Renames a file when the Explorer view is visible and the Files Explorer is focused.
        "key": "ctrl+enter",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        // "enter": Disables the default "renameFile" command when the Explorer view is visible and the Files Explorer is focused.
        "key": "enter",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        // "enter": Selects an item in a list when the list is focused and no input field is focused.
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },

    //
    // TERMINAL SHORTCUTS
    //
    {
        // Focus the terminal when the terminal is not focused
        "key": "ctrl+;",
        "command": "workbench.action.terminal.focus"
    },
    {
        // Focus the active editor group (text editor) when the terminal is focused
        "key": "ctrl+;",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        // Maximize/minimize terminal panel and focus on terminal when terminal is not focused
        // (requires "multi-command" extension and "multiCommand.toggleMaximizedPanelAndFocusTerminal" command defined in settings.json)
        "key": "ctrl+shift+;",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "!terminalFocus || terminalFocus"
    },
    // {
    //   "key": "ctrl+i",
    //   "command": "workbench.action.navigateForward"
    // },
    // {
    // 	"key": "ctrl+i",
    // 	"command": "vim.remap",
    //   "when": "vim.mode == 'Normal' && inputFocus",
    //   "args": {
    //     "after": ["<C-i>"]
    //   }
    // },
    {
        "key": "ctrl+k",
        "command": "vim.remap",
        "when": "vim.mode == 'Normal' && inputFocus",
        "args": {
            "after": ["<C-o>"]
        }
    },
    {
        "key": "alt+v",
        "command": "verseWorkflow.pushVerseChanges"
    },
    {
        "key": "ctrl+alt+d",
        "command": "-dart.openDevTools",
        "when": "dart-code:anyProjectLoaded"
    },
    {
        "key": "ctrl+shift+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+alt+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+alt+f",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+alt+i",
        "command": "tabnine.chat.focus"
    },
    {
        "key": "ctrl+alt+i",
        "command": "-workbench.action.chat.open"
    },
    {
        "key": "ctrl+b",
        "command": "-extension.vim_ctrl+b",
        "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
    },
    // {
    //     "key": "F7",
    //     "command": "settings.cycle.hlsearch",
    //     "when": "editorTextFocus && vim.active && vim.mode == 'Normal'"
    // },
    {
        "key": "ctrl+alt+d",
        "command": "vim.remap",
        "when": "inputFocus && vim.mode == 'Normal'",
        "args": {
            "after": ["<C-d>"]
        }
    },
    // {
    //   "key": "shift+k",
    //   "command": "lineBreakInsert",
    //   "when": "inputFocus && vim.mode == 'Normal'"
    // },
    // enter, delete in insert mode
    {
        "key": "delete",
        "command": "editor.action.hideColorPicker", // do nothing
        "when": "vim.mode == 'Insert' && editorTextFocus && inputFocus"
    },
    {
        "key": "backspace",
        "command": "editor.action.hideColorPicker", // do nothing
        "when": "vim.mode == 'Insert' && editorTextFocus && inputFocus"
    },
    // {
    //     "key": "enter",
    //     "command": "editor.action.hideColorPicker", // do nothing
    //     "when": "vim.mode == 'Insert' && editorTextFocus && inputFocus"
    // },
    {
        "key": "ctrl+space",
        "command": "runCommands",
        "args": {
            // open file in the same tab you're in
            "commands": [
                "lineBreakInsert",
                "cursorRight",
                "cursorWordStartRight"
            ]
        },
        "when": "vim.mode == 'Insert' && textInputFocus && (findWidgetVisible || !suggestWidgetVisible)"
    },
    {
        "key": "ctrl+space",
        "command": "runCommands",
        "args": {
            // "commands": ["cursorRight", "lineBreakInsert", "cursorLeft"]
            "commands": [
                "cursorRight",
                "lineBreakInsert",
                "cursorRight",
                "cursorWordStartRight"
            ]
        },
        "when": "vim.mode == 'Normal' && textInputFocus && (findWidgetVisible || !suggestWidgetVisible)"
    },
    {
        "key": "ctrl+shift+space",
        "command": "runCommands",
        "args": {
            "commands": ["editor.action.insertLineAfter", "cursorUp"]
        },
        "when": "textInputFocus && !findWidgetVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+o",
        "command": "deleteRight",
        "when": "vim.mode == 'Insert' && textInputFocus"
    },
    {
        "key": "ctrl+u",
        "command": "deleteLeft",
        "when": "vim.mode == 'Insert' && textInputFocus"
    },
    {
        "key": "right", // "ctrl+l"
        "command": "deleteWordRight",
        "when": "vim.mode == 'Insert' && textInputFocus"
    },
    {
        "key": "left", // "ctrl+j"
        "command": "deleteWordLeft",
        "when": "vim.mode == 'Insert' && textInputFocus"
    },
    // Test delete word
    // {
    //   "key": "space k",
    //   "command": "runCommands",
    //   "args": {
    //     "commands": ["deleteWordRight", "lineBreakInsert", "cursorRight"]
    //   },
    //   "when": "vim.mode == 'Normal' && textInputFocus"
    // },
    // Snippets [TEST]
    // {
    //   "key": "f d",
    //   "command": "editor.action.insertSnippet",
    //   "when": "vim.mode == 'Insert' && textInputFocus",
    //   "args": { "snippet": "Fairy Dust" }
    // },
    // {
    //   "key": "m r",
    //   "command": "editor.action.insertSnippet",
    //   "when": "vim.mode == 'Insert' && textInputFocus",
    //   "args": { "snippet": "Mirror" }
    // },
    // {
    //   "key": "r v",
    //   "command": "editor.action.insertSnippet",
    //   "when": "vim.mode == 'Insert' && textInputFocus",
    //   "args": { "snippet": "Roosevelt" }
    // },
    // {
    //   "key": "c r",
    //   "command": "editor.action.insertSnippet",
    //   "when": "vim.mode == 'Insert' && textInputFocus",
    //   "args": { "snippet": "Crystal" }
    // },
    // navigate using ijkl when in file list view
    {
        "key": "i",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "k",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "j",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "l",
        "command": "runCommands",
        "args": {
            // open file in the same tab you're in
            "commands": [
                {
                    "command": "workbench.action.closeActiveEditor",
                    "when": "activeEditorIsNotPreview"
                },
                "list.select"
            ]
        },
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "tab",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'",
        "command": "editor.action.indentLines"
    },
    {
        "key": "shift+tab",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'",
        "command": "editor.action.outdentLines"
    },
    {
        "key": "tab",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "workbench.action.closeActiveEditor",
                    "when": "activeEditorIsNotPreview"
                },
                "workbench.action.acceptSelectedQuickOpenItem",
                "workbench.action.closeQuickOpen"
            ]
        },
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "o",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.quickchat.toggle",
        "when": "chatIsEnabled"
    },
    // go up and down in folder
    {
        "key": "ctrl+shift+i",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "runCommands",
                    "args": {
                        "commands": ["workbench.action.closeActiveEditor"]
                    },
                    "when": "activeEditorIsNotPreview"
                },
                "workbench.files.action.focusFilesExplorer",
                "list.focusUp",
                "list.select"
            ]
        },
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+k",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "runCommands",
                    "args": {
                        "commands": ["workbench.action.closeActiveEditor"]
                    },
                    "when": "activeEditorIsNotPreview"
                },
                "workbench.files.action.focusFilesExplorer",
                "list.focusDown",
                "list.select"
            ]
        },
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFolderViaWorkspace",
        "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "workbench.action.focusPreviousGroup"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+'",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.compareEditor.focusOtherSide"
    },
    {
        "key": "ctrl+alt+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "ctrl+alt+b",
        "command": "workbench.action.focusAuxiliaryBar"
    },
    {
        "key": "ctrl+shift+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    // {
    // 	"key": "ctrl+shift+g",
    // 	"command": "workbench.scm.toggleVisibility",
    // },
    {
        "key": "ctrl+alt+y",
        "command": "deleteFile",
        "title": "hello delete file"
    },
    {
        // TODO? how do you focus on last activer file on the tree
        "key": "ctrl+shift+g",
        "command": "workbench.scm.focus",
        "when": "view.workbench.scm.visible"
    },
    {
        "key": "ctrl+shift+g",
        "command": "runCommands",
        "when": "!view.workbench.scm.visible",
        "args": {
            "commands": [
                "workbench.scm.action.focusNextResourceGroup",
                "workbench.scm.action.focusPreviousResourceGroup"
            ]
        }
    },
    // customize F4 or next search result to open in the last editor
    {
        "key": "f4",
        "command": "-references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "F4",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.focusSecondEditorGroup",
                "references-view.next"
            ]
        },
        "when": "reference-list.hasResult && references-view.canNavigate",
        "title": "my Go to Next Reference"
    },
    {
        "key": "F4",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.focusSecondEditorGroup",
                "search.action.focusNextSearchResult"
            ]
        },
        "when": "hasSearchResult || inSearchEditor",
        "title": "my Search: Focus Next Search Result"
    },
    {
        "key": "shift+F4",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.focusSecondEditorGroup",
                "search.action.focusPreviousSearchResult"
            ]
        },
        "when": "hasSearchResult || inSearchEditor",
        "title": "my Search: Focus Previous Search Result"
    },
    {
        "key": "F4",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.focusSecondEditorGroup",
                "goToNextReference"
            ]
        },
        "when": "inReferenceSearchEditor || referenceSearchVisible",
        "title": "my goToNextReference"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.action.quickTextSearch"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "ctrl+shift+f",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.findInFiles",
                "search.action.refreshSearchResults"
            ]
        }
    },
    {
        "key": "ctrl+alt+u",
        "command": "inlineChat.toggleDiff"
    },
    {
        "key": "ctrl+shift+m",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+shift+alt+m",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus && !textCompareEditorActive"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile"
    },
    {
        "key": "ctrl+shift+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+down",
        "command": "-gotoNextPreviousMember.nextMember"
    },
    {
        "key": "ctrl+up",
        "command": "-gotoNextPreviousMember.previousMember"
    },
    {
        "key": "ctrl+down",
        "command": "-next-previous-method.nextMethod",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-next-previous-method.previousMethod",
        "when": "editorTextFocus"
    },
    {
        // jump to next method
        "key": "alt+n",
        "command": "runCommands",
        "args": {
            "commands": [
                "next-previous-method.nextMethod"
                // {
                //     "command": "vim.remap",
                //     "args": { "after": ["z", "z"] }
                // }
            ]
        },
        "when": "vim.mode == 'Normal'"
    },
    {
        // jump to previous method
        "key": "alt+m",
        "command": "runCommands",
        "args": {
            "commands": [
                "next-previous-method.previousMethod"
                // {
                //     "command": "vim.remap",
                //     "args": { "after": ["z", "z"] }
                // }
            ]
        },
        "when": "vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "ctrl+space",
        "command": "list.selectAndPreserveFocus",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    {
        "key": "shift+space",
        "command": "editor.action.inlineEdits.accept",
        "when": "inlineEditsVisible"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.inlineEdits.accept",
        "when": "inlineEditsVisible"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "F9",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction",
                "workbench.action.debug.continue",
                "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction",
                "workbench.debug.panel.action.clearReplAction",
                "workbench.debug.action.focusRepl"
            ]
        }
    }
]